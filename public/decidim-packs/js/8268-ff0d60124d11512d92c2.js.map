{"version":3,"file":"js/8268-ff0d60124d11512d92c2.js","mappings":"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","sources":["webpack://app/../../../.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-47971368df59/decidim-core/app/packs/src/decidim/editor/attribute_diff.js","webpack://app/../../../.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-47971368df59/decidim-core/app/packs/src/decidim/editor/history_override.js","webpack://app/../../../.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-47971368df59/decidim-core/app/packs/src/decidim/editor/linebreak_module.js","webpack://app/../../../.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-47971368df59/decidim-core/app/packs/src/decidim/editor/modified_backspace_offset1.js","webpack://app/../../../.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-47971368df59/decidim-core/app/packs/src/decidim/editor/modified_backspace_offset_any.js","webpack://app/../../../.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-47971368df59/decidim-core/app/packs/src/decidim/editor/modified_enter.js"],"sourcesContent":["/* eslint-disable require-jsdoc */\n\n// ORGINAL: https://github.com/quilljs/delta/blob/ddda3bf088cda3ec03d5dbcc1179679d147f3a02/src/AttributeMap.ts\nexport default function attributeDiff(attributes1, attributes2) {\n  let alpha = attributes1;\n  let beta = attributes2;\n  if (typeof alpha !== \"object\") {\n    alpha = {};\n  }\n  if (typeof beta !== \"object\") {\n    beta = {};\n  }\n  const attributes = Object.keys(alpha).concat(Object.keys(beta)).reduce((attrs, key) => {\n    // ORGINAL: import isEqual from 'lodash.isequal'; if (!isEqual(a[key], b[key]))\n    if ((alpha[key] !== beta[key])) {\n      attrs[key] = null;\n      if (beta[key]) {\n        attrs[key] = beta[key]\n      }\n    }\n    return attrs;\n  }, {});\n\n  if (Object.keys(attributes).length > 0) {\n    return attributes;\n  }\n  return null;\n}\n","/* eslint-disable require-jsdoc */\n\nconst History = Quill.import(\"modules/history\");\nHistory.DEFAULTS = {\n  delay: 1000,\n  maxStack: 100,\n  userOnly: true\n};\n\n/**\n * Linebreak module brokes quill's default history class.\n * So here we are moving innerHTML to undo and redo stack\n * instead of deltas.\n */\nexport default class HistoryOverride extends History {\n  constructor(quill, options) {\n    super(quill, options);\n    this.lastRecorded = 0;\n    this.ignoreChange = false;\n    this.init = false;\n    this.quill.emitter.on(\"editor-ready\", () => {\n      this.clear();\n      const $input = $(this.quill.container).siblings('input[type=\"hidden\"]');\n      this.stack.undo.push({content: $input.val() || \"\", index: this.quill.getLength() - 2 });\n      this.lastLength = this.quill.getLength();\n    })\n    /* eslint-disable max-params */\n    this.quill.on(Quill.events.EDITOR_CHANGE, (eventName, delta, oldDelta, source) => {\n      if (!delta) {\n        return;\n      }\n      if (!this.init && eventName === \"selection-change\") {\n        this.stack.undo[0].index = delta.index;\n      }\n      if (eventName !== Quill.events.TEXT_CHANGE || this.ignoreChange) {\n        return;\n      }\n\n      if (!this.options.userOnly || source === Quill.sources.USER) {\n        this.record(delta, oldDelta);\n      }\n    });\n    this.quill.keyboard.addBinding({ key: \"Z\", shortKey: true }, this.undo.bind(this));\n    this.quill.keyboard.addBinding({ key: \"Z\", shortKey: true, shiftKey: true }, this.redo.bind(this));\n    if ((/Win/i).test(navigator.platform)) {\n      this.quill.keyboard.addBinding({ key: \"Y\", shortKey: true }, this.redo.bind(this));\n    }\n  }\n  /* eslint-enable max-params */\n\n  change(source, dest) {\n    if (this.stack[source].length === 0) {\n      return;\n    }\n    let obj = this.updateStacks(source, dest);\n    if (!obj.content) {\n      return;\n    }\n    if (!obj.index) {\n      obj.index = 0\n    }\n    this.lastRecorded = 0;\n    this.ignoreChange = true;\n    this.quill.setContents(this.quill.clipboard.convert(obj.content));\n    this.ignoreChange = false;\n    let index = obj.index;\n    this.quill.setSelection(index);\n  }\n\n  updateStacks(source, dest) {\n    if (source === \"undo\") {\n      if (this.stack.undo.length === 1) {\n        return this.stack.undo[0]\n      }\n      this.stack[dest].push(this.stack.undo.pop())\n      return this.stack.undo[this.stack.undo.length - 1]\n    }\n    let content = this.stack.redo.pop();\n    this.stack.undo.push(content)\n    return content\n  }\n\n  record(changeDelta) {\n    if (changeDelta.ops.length === 0) {\n      return\n    } else if (!this.init) {\n      this.init = true;\n    }\n    this.stack.redo = [];\n    let timestamp = Date.now();\n    // Should not return after length check, because after linebreak a keypress replaces invisible characters with\n    // visible characters.\n    // For example: <br><br></p> -> [press X] -> <br>X</p>.\n    if (Math.abs(this.lastLength === this.quill.getLength()) || this.lastRecorded + this.options.delay > timestamp) {\n      if (this.stack.undo.length > 1) {\n        this.stack.undo.pop();\n      }\n    } else {\n      this.lastLength = this.quill.getLength();\n      if (this.lastRecorded + this.options.delay <= timestamp) {\n        this.lastRecorded = timestamp;\n      }\n    }\n    this.stack.undo.push({content: this.quill.container.firstChild.innerHTML, index: this.quill.getSelection()})\n  }\n\n  transform() {\n    return;\n  }\n}\n","/* eslint-disable require-jsdoc */\n\nimport addEnterBindings from \"src/decidim/editor/modified_enter\"\nimport backspaceBindingsRangeAny from \"src/decidim/editor/modified_backspace_offset_any\"\nimport backspaceBindings from \"src/decidim/editor/modified_backspace_offset1\"\nimport HistoryOverride from \"src/decidim/editor/history_override\"\n\n// Disable warning messages from overwritting modules\nQuill.debug(\"error\");\n\n// It all started with these snippets of code: https://github.com/quilljs/quill/issues/252\nconst Delta = Quill.import(\"delta\");\nconst Break = Quill.import(\"blots/break\");\nconst Embed = Quill.import(\"blots/embed\");\nconst Scroll = Quill.import(\"blots/scroll\");\nconst Parchment = Quill.import(\"parchment\");\nQuill.register({\"modules/history\": HistoryOverride}, true);\nlet icons = Quill.import(\"ui/icons\");\nicons.linebreak = \"⏎\";\n\nclass SmartBreak extends Break {\n  length() {\n    return 1;\n  }\n\n  value() {\n    return \"\\n\";\n  }\n\n  insertInto(parent, ref) {\n    // Embed.prototype.insertInto.call(this, parent, ref);\n    Reflect.apply(Embed.prototype.insertInto, this, [parent, ref]);\n  }\n}\nQuill.register(SmartBreak);\n\n// Override quill/blots/scroll.js\nclass ScrollOvderride extends Scroll {\n  optimize(mutations = [], context = {}) {\n    if (this.batch === true) {\n      return;\n    }\n\n    this.parchmentOptimize(mutations, context);\n\n    if (mutations.length > 0) {\n      // quill/core/emitter.js, Emitter.events.SCROLL_OPTIMIZE = \"scroll-optimize\"\n      this.emitter.emit(\"scroll-optimize\", mutations, context);\n    }\n  }\n\n  // Override parchment/src/blot/scroll.ts\n  parchmentOptimize(mutations = [], context = {}) {\n    // super.optimize(context);\n    Reflect.apply(Parchment.Container.prototype.optimize, this, [context]);\n\n    // We must modify mutations directly, cannot make copy and then modify\n    // let records = [].slice.call(this.observer.takeRecords());\n    let records = [...this.observer.takeRecords()];\n    // Array.push currently seems to be implemented by a non-tail recursive function\n    // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());\n    while (records.length > 0) {\n      mutations.push(records.pop());\n    }\n    let mark = (blot, markParent) => {\n      if (!blot || blot === this) {\n        return;\n      }\n      if (!blot.domNode.parentNode) {\n        return;\n      }\n      if (blot.domNode.__blot && blot.domNode.__blot.mutations === null) {\n        blot.domNode.__blot.mutations = [];\n      }\n      if (markParent) {\n        mark(blot.parent);\n      }\n    };\n    let optimize = (blot) => {\n      // Post-order traversal\n      if (!blot.domNode.__blot) {\n        return;\n      }\n\n      if (blot instanceof Parchment.Container) {\n        blot.children.forEach(optimize);\n      }\n      blot.optimize(context);\n    };\n    let remaining = mutations;\n    for (let ind = 0; remaining.length > 0; ind += 1) {\n      // MAX_OPTIMIZE_ITERATIONS = 100\n      if (ind >= 100) {\n        throw new Error(\"[Parchment] Maximum optimize iterations reached\");\n      }\n      remaining.forEach((mutation) => {\n        let blot = Parchment.find(mutation.target, true);\n        if (!blot) {\n          return;\n        }\n        if (blot.domNode === mutation.target) {\n          if (mutation.type === \"childList\") {\n            mark(Parchment.find(mutation.previousSibling, false));\n\n            mutation.addedNodes.forEach((node) => {\n              let child = Parchment.find(node, false);\n              mark(child, false);\n              if (child instanceof Parchment.Container) {\n                child.children.forEach(function(grandChild) {\n                  mark(grandChild, false);\n                });\n              }\n            });\n          } else if (mutation.type === \"attributes\") {\n            mark(blot.prev);\n          }\n        }\n        mark(blot);\n      });\n      this.children.forEach(optimize);\n      remaining = [...this.observer.takeRecords()];\n      records = remaining.slice();\n      while (records.length > 0) {\n        mutations.push(records.pop());\n      }\n    }\n  }\n};\nQuill.register(\"blots/scroll\", ScrollOvderride, true);\nParchment.register(ScrollOvderride);\n\n\nexport default function lineBreakButtonHandler(quill) {\n  let range = quill.selection.getRange()[0];\n  let currentLeaf = quill.getLeaf(range.index)[0];\n  let nextLeaf = quill.getLeaf(range.index + 1)[0];\n  const previousChar = quill.getText(range.index - 1, 1);\n\n  // Insert a second break if:\n  // At the end of the editor, OR next leaf has a different parent (<p>)\n  if (nextLeaf === null || (currentLeaf.parent !== nextLeaf.parent)) {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n  } else if (previousChar === \"\\n\") {\n    const delta = new Delta().retain(range.index).insert(\"\\n\");\n    quill.updateContents(delta, Quill.sources.USER);\n  } else {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n  }\n\n  // Now that we've inserted a line break, move the cursor forward\n  quill.setSelection(range.index + 1, Quill.sources.SILENT);\n}\n\nQuill.register(\"modules/linebreak\", (quill) => {\n  quill.getModule(\"toolbar\").addHandler(\"linebreak\", () => {\n    lineBreakButtonHandler(quill);\n  });\n\n  quill.emitter.on(\"editor-ready\", () => {\n    const length = quill.getLength();\n    const text = quill.getText(length - 2, 2);\n\n    // Remove extraneous new lines\n    if (text === \"\\n\\n\") {\n      quill.deleteText(quill.getLength() - 2, 2);\n    }\n  });\n\n  quill.clipboard.addMatcher(\"BR\", (node) => {\n    if (node?.parentNode?.tagName === \"A\") {\n      return new Delta().insert(\"\\n\");\n    }\n    return new Delta().insert({\"break\": \"\"});\n  });\n\n  addEnterBindings(quill);\n  backspaceBindingsRangeAny(quill);\n  backspaceBindings(quill);\n\n  return;\n});\n\n","/* eslint-disable require-jsdoc */\n\nimport attributeDiff from \"src/decidim/editor/attribute_diff\"\n\nconst Delta = Quill.import(\"delta\");\n\nconst previousChar = (quill, range) => {\n  return quill.getText(range.index - 1, 1);\n}\n\nconst beforePreviousChar = (quill, range) => {\n  return quill.getText(range.index - 2, 1);\n}\n\nconst nextChar = (quill, range) => {\n  return quill.getText(range.index, 1);\n}\n\nconst handleListSelection = (quill, range) => {\n  const lastCharacterOfPreviousLine = quill.getText(range.index - 3, 1);\n  if (nextChar(quill, range) === \"\\n\" || lastCharacterOfPreviousLine !== \"\\n\") {\n    quill.setSelection(range.index - 1, Quill.sources.SILENT);\n  } else {\n    quill.setSelection(range.index - 3, Quill.sources.SILENT);\n  }\n}\n\nconst moveSelectionToPreviousLine = (quill, range) => {\n  const lastCharacterOfPreviousLine = quill.getText(range.index - 3, 1);\n  if (nextChar(quill, range) === \"\\n\" || lastCharacterOfPreviousLine !== \"\\n\") {\n    quill.setSelection(range.index - 1, Quill.sources.SILENT);\n  } else {\n    quill.setSelection(range.index - 3, Quill.sources.SILENT);\n  }\n}\n\nexport default function backspaceBindings(quill) {\n  quill.keyboard.addBinding({ key: 8, offset: 1, collapsed: true }, (range, context) => {\n    let length = 1\n    if ((/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]$/).test(context.prefix)) {\n      length = 2;\n    }\n\n    if (range.index === 0 || quill.getLength() <= 1) {\n      return;\n    }\n    let formats = {};\n    const [line] = quill.getLine(range.index);\n    let delta = new Delta().retain(range.index - length).delete(length);\n    if (context.offset === 1 && previousChar(quill, range) === \"\\n\") {\n      const [prev] = quill.getLine(range.index - 2);\n      if (prev && prev.statics.blotName === \"list-item\") {\n        formats = handleListSelection(quill, range);\n        if (prev !== null && prev.length() > 1) {\n          let curFormats = line.formats();\n          let prevFormats = quill.getFormat(range.index - 2, 1);\n          formats = attributeDiff(curFormats, prevFormats) || {};\n          length += 1;\n        }\n        delta = new Delta().retain(range.index - 2).delete(2);\n        moveSelectionToPreviousLine(quill, range);\n      } else {\n        delta = new Delta().retain(range.index - 1).delete(1);\n        if (range.index < 2) {\n          delta = new Delta().delete(1).retain(range.index + line.length() - 1);\n        } else if (previousChar(quill, range) === \"\\n\" && beforePreviousChar(quill, range) === \"\\n\") {\n          delta = new Delta().retain(range.index - 2).delete(2);\n        }\n      }\n    } else {\n      const [prev] = quill.getLine(range.index - 1);\n      if (prev) {\n        const isPrevLineEmpty =\n          prev.statics.blotName === \"block\" && prev.length() <= 1;\n        if (!isPrevLineEmpty) {\n          const curFormats = line.formats();\n          const prevFormats = quill.getFormat(range.index - 1, 1);\n          formats = attributeDiff(curFormats, prevFormats) || {};\n          if (Object.keys(formats).length > 0) {\n            // line.length() - 1 targets \\n in line, another -1 for newline being deleted\n            const formatDelta = new Delta().retain(range.index + line.length() - 2).retain(1, formats);\n            delta = delta.compose(formatDelta);\n          }\n        }\n      }\n    }\n    quill.updateContents(delta, Quill.sources.USER);\n    if (Object.keys(formats).length > 0) {\n      quill.formatLine(range.index - length, length, formats, Quill.sources.USER);\n    }\n    quill.focus();\n  });\n\n  // Put this backspace binding to second\n  quill.keyboard.bindings[8].splice(1, 0, quill.keyboard.bindings[8].pop());\n}\n","/* eslint-disable require-jsdoc */\n\nimport attributeDiff from \"src/decidim/editor/attribute_diff\"\n\nexport default function backspaceBindingsRangeAny(quill) {\n  quill.keyboard.addBinding({ key: 8, altKey: null, ctrlKey: null, metaKey: null, shiftKey: null, collapsed: true }, (range, context) => {\n    let length = 1;\n    if (range.index === 0 || quill.getLength() <= 1) {\n      return;\n    }\n    let [line] = quill.getLine(range.index);\n    let formats = {};\n    if (context.offset === 0) {\n      let [prev] = quill.getLine(range.index - 1);\n      if (prev !== null && prev.length() > 1) {\n        let curFormats = line.formats();\n        let prevFormats = quill.getFormat(range.index - 1, 1);\n        formats = attributeDiff(curFormats, prevFormats) || {};\n        const previousLineLength = quill.getLine(range.index - 1)[1];\n        const previousChar = quill.getText(range.index - 1, 1)\n        const beforePreviousChar = quill.getText(range.index - 2, 1);\n        if (previousLineLength && previousLineLength === 1 && beforePreviousChar === \"\\n\") {\n          if (prevFormats && prevFormats.list) {\n            quill.setSelection(range.index - 2, Quill.sources.SILENT);\n          } else if (previousChar === \"\\n\" && beforePreviousChar === \"\\n\") {\n            length += 1;\n          }\n        }\n      }\n    }\n\n    if ((/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]$/).test(context.prefix)) {\n      length += 1;\n    }\n    quill.deleteText(range.index - length, length, Quill.sources.USER);\n\n    if (Object.keys(formats).length > 0) {\n      quill.formatLine(range.index - length, length, formats, Quill.sources.USER);\n    }\n    quill.focus();\n  })\n\n  // Put this backspace binding to second (after backspce_offset1 it's going to be third)\n  quill.keyboard.bindings[8].splice(1, 0, quill.keyboard.bindings[8].pop());\n}\n\n","/* eslint-disable require-jsdoc */\n\nconst Parchment = Quill.import(\"parchment\")\nconst Delta = Quill.import(\"delta\");\n\nconst getLineFormats = (context) => {\n  return Object.keys(context.format).reduce(\n    (formats, format) => {\n      // See Parchment registry.ts => (1 << 3) | ((1 << 2) - 1) = 8 | 3 = 11\n      const blockScope = 11;\n      if (\n        Parchment.query(format, blockScope) &&\n        !Array.isArray(context.format[format])\n      ) {\n        formats[format] = context.format[format];\n      }\n      return formats;\n    },\n    {},\n  );\n}\n\nconst continueFormats = (quill, context, lineFormats) => {\n  Object.keys(context.format).forEach((name) => {\n    if (typeof lineFormats[name] !== \"undefined\" && lineFormats[name] !== null) {\n      return;\n    }\n    if (Array.isArray(context.format[name])) {\n      return;\n    }\n    if (name === \"link\") {\n      return;\n    }\n    quill.format(name, context.format[name], Quill.sources.USER);\n  });\n}\n\nconst lineBreakHandler = (quill, range, context) => {\n  const currentLeaf = quill.getLeaf(range.index)[0];\n  const nextLeaf = quill.getLeaf(range.index + 1)[0];\n  const previousChar = quill.getText(range.index - 1, 1);\n  const formats = quill.getFormat(range.index);\n\n  if (currentLeaf?.next?.domNode?.tagName === \"A\" || nextLeaf?.parent?.domNode?.tagName === \"A\") {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n    quill.removeFormat(range.index, 1, Quill.sources.SILENT)\n  } else {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n  }\n\n  if (nextLeaf === null) {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n  } else if (context.offset === 1 && previousChar === \"\\n\") {\n    const delta = new Delta().retain(range.index).insert(\"\\n\");\n    quill.updateContents(delta, Quill.sources.USER);\n  }\n\n  Object.keys(formats).forEach((format) => {\n    quill.format(format, context.format[format], Quill.sources.USER);\n  });\n  quill.setSelection(range.index + 1, Quill.sources.SILENT);\n\n  const lineFormats = getLineFormats(context);\n  continueFormats(quill, context, lineFormats);\n};\n\nexport default function addEnterBindings(quill) {\n  quill.keyboard.addBinding({\n    key: 13,\n    shiftKey: true\n  }, (range, context) => {\n    lineBreakHandler(quill, range, context);\n  });\n\n  // HAX: make our SHIFT+ENTER binding the second (first is added below) in order to override Quill defaults\n  quill.keyboard.bindings[13].unshift(quill.keyboard.bindings[13].pop());\n\n  quill.keyboard.addBinding({ key: 13, shiftKey: false }, (range, context) => {\n    const lineFormats = getLineFormats(context);\n    const previousChar = quill.getText(range.index - 1, 1);\n    const nextChar = quill.getText(range.index, 1);\n    const delta = new Delta().retain(range.index).insert(\"\\n\", lineFormats);\n    // const length = context.prefix.length;\n    if (previousChar === \"\" || previousChar === \"\\n\") {\n      if (lineFormats.list && nextChar === \"\\n\") {\n        if (quill.getLength() - range.index > 2) {\n          const endFormatDelta = new Delta().retain(range.index - 1).delete(1);\n          quill.updateContents(endFormatDelta, Quill.sources.USER);\n        } else {\n          // Delete empty list item and end the list\n          const endFormatDelta = new Delta().retain(range.index - 1).delete(1).retain(range.index).insert(\"\\n\");\n          quill.updateContents(endFormatDelta, Quill.sources.USER);\n          quill.setSelection(range.index + 1, Quill.sources.SILENT);\n        }\n      } else {\n        quill.updateContents(delta, Quill.sources.USER);\n        if (context.offset === 1 && previousChar === \"\\n\") {\n          quill.setSelection(range.index + 1, Quill.sources.SILENT);\n        } else {\n          quill.setSelection(range.index + 2, Quill.sources.SILENT);\n        }\n      }\n    } else {\n      quill.updateContents(delta, Quill.sources.USER);\n      quill.setSelection(range.index + 1, Quill.sources.SILENT);\n    }\n    quill.focus();\n\n    continueFormats(quill, context, lineFormats);\n  });\n\n  // Replace the default enter handling because we have modified the break element\n  quill.keyboard.bindings[13].unshift(quill.keyboard.bindings[13].pop());\n  return;\n}\n\n"],"names":["attributeDiff","attributes1","attributes2","alpha","beta","_typeof","attributes","Object","keys","concat","reduce","attrs","key","length","History","Quill","DEFAULTS","delay","maxStack","userOnly","HistoryOverride","quill","options","_this","lastRecorded","ignoreChange","init","emitter","on","clear","$input","$","container","siblings","stack","undo","push","content","val","index","getLength","lastLength","events","EDITOR_CHANGE","eventName","delta","oldDelta","source","TEXT_CHANGE","sources","USER","record","keyboard","addBinding","shortKey","bind","shiftKey","redo","test","navigator","platform","dest","this","obj","updateStacks","setContents","clipboard","convert","setSelection","pop","changeDelta","ops","timestamp","Date","now","Math","abs","firstChild","innerHTML","getSelection","debug","Delta","Break","Embed","Scroll","Parchment","register","linebreak","icons","SmartBreak","parent","ref","Reflect","apply","prototype","insertInto","ScrollOvderride","mutations","context","batch","parchmentOptimize","emit","Container","optimize","records","observer","takeRecords","mark","blot","markParent","domNode","parentNode","__blot","children","forEach","remaining","ind","Error","mutation","find","target","type","previousSibling","addedNodes","node","child","grandChild","prev","slice","lineBreakButtonHandler","range","selection","getRange","currentLeaf","getLeaf","nextLeaf","previousChar","getText","insertEmbed","retain","insert","updateContents","SILENT","getModule","addHandler","deleteText","addMatcher","tagName","addEnterBindings","backspaceBindingsRangeAny","backspaceBindings","nextChar","offset","collapsed","prefix","formats","line","getLine","statics","blotName","lastCharacterOfPreviousLine","handleListSelection","curFormats","prevFormats","getFormat","moveSelectionToPreviousLine","beforePreviousChar","formatDelta","compose","formatLine","focus","bindings","splice","altKey","ctrlKey","metaKey","previousLineLength","list","getLineFormats","format","query","Array","isArray","continueFormats","lineFormats","name","next","removeFormat","lineBreakHandler","unshift","endFormatDelta"],"sourceRoot":""}