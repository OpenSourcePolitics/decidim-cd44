{"version":3,"file":"js/6896-278739ee4a9c6d426419.chunk.js","mappings":"6JA0BA,SAASA,EAAOC,EAAOC,GACrB,IAAIC,EAAIC,EACR,MAAMC,EAASJ,EAAMI,OAErB,QADeA,GAA4B,IAAlBA,EAAOC,OAAmCD,EAAOA,EAAOC,OAAS,KAAqC,QAA7BH,EAAKI,KAAKC,qBAAkC,IAAPL,OAAgB,EAASA,EAAGM,KAAKP,IAAc,EAAI,GAA3ID,EAAMS,cACpC,KAA8B,QAAtBN,EAAKG,KAAKI,cAA2B,IAAPP,OAAgB,EAASA,EAAGQ,aAAe,GAxBpG,EAAAC,EAAA,WAAsB,mBAAoBF,IACxC,MAAMG,GAAS,IAAAC,GAAa,CAC1BC,cAAgBC,GAAWA,EAAOC,WAClCC,SAAUC,EACVC,WAAYC,EACZC,aAAc,CAAEC,QAASb,EAAOa,WAElC,MAAO,CACLb,OAAAA,EACAc,WAAYX,EAAOW,WACnBC,MAAOZ,EAAOY,MACd1B,OAAAA,EACAQ,cAAe,YACfmB,KAAM,QACNC,cAAe,CACbC,MAAO,SACPC,QAAS,YAUf,MAAMV,EAAW,CACfW,YAAa,kBACbC,OAAQ,4DACRC,OAAQ,0DACRC,QAAS,oBAELZ,EAAa,CACjBa,SAAU,EAAC,IAAAC,GAAE,MAAM,IAAAC,GAAK,SAAS,IAAAD,GAAE,OAAO,IAAAA,GAAE,MAC5CE,MAAO,EAAC,IAAAC,GAAE,SAAU,QAAQ,IAAAH,GAAE,KAAM,SACpCI,MAAMd,GACJ,OAAQA,EAAMe,MACZ,IAAK,SACH,MAAO,cACT,IAAK,SACH,MAAO,cACT,IAAK,cACH,OAAQf,EAAMgB,OACZ,IAAK,IACH,MAAO,YACT,IAAK,IACH,MAAO,cAEX,OAAO,KACT,IAAK,UACH,OAAQhB,EAAMgB,OACZ,IAAK,OACL,IAAK,QACH,MAAO,eACT,IAAK,OACH,MAAO,YAEX,OAAO,OAGbC,YAAa,EAAC,IAAAJ,GAAE,SAAU,WAC1BK,YAAa,EAAC,IAAAL,GAAE,SAAU,WAC1BM,aAAc,EAAC,IAAAN,GAAE,UAAW,YAC5BO,UAAW,EAAC,IAAAP,GAAE,UAAW,YACzBQ,UAAW,EAAC,IAAAX,GAAE,MAAM,IAAAC,GAAK,SAAS,IAAAD,GAAE,OAAO,IAAAA,GAAE,MAC7CY,YAAa,EAAC,IAAAZ,GAAE,MAAM,IAAAC,GAAK,eAAe,IAAAD,GAAE,OAAO,IAAAA,GAAE,MACrDa,YAAa,EAAC,IAAAV,GAAE,SAAU,aAAa,IAAAH,GAAE,KAAM","sources":["webpack://app/./node_modules/@graphiql/react/dist/mode.es2.js"],"sourcesContent":["import { C as CodeMirror } from \"./codemirror.es.js\";\nimport \"graphql\";\nimport { o as onlineParser, p, l as list, t } from \"./types.es.js\";\nimport \"./index.es.js\";\nimport \"react\";\nimport \"react-dom\";\nCodeMirror.defineMode(\"graphql-results\", (config) => {\n  const parser = onlineParser({\n    eatWhitespace: (stream) => stream.eatSpace(),\n    lexRules: LexRules,\n    parseRules: ParseRules,\n    editorConfig: { tabSize: config.tabSize }\n  });\n  return {\n    config,\n    startState: parser.startState,\n    token: parser.token,\n    indent,\n    electricInput: /^\\s*[}\\]]/,\n    fold: \"brace\",\n    closeBrackets: {\n      pairs: '[]{}\"\"',\n      explode: \"[]{}\"\n    }\n  };\n});\nfunction indent(state, textAfter) {\n  var _a, _b;\n  const levels = state.levels;\n  const level = !levels || levels.length === 0 ? state.indentLevel : levels[levels.length - 1] - (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n  return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}\nconst LexRules = {\n  Punctuation: /^\\[|]|\\{|\\}|:|,/,\n  Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n  String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n  Keyword: /^true|false|null/\n};\nconst ParseRules = {\n  Document: [p(\"{\"), list(\"Entry\", p(\",\")), p(\"}\")],\n  Entry: [t(\"String\", \"def\"), p(\":\"), \"Value\"],\n  Value(token) {\n    switch (token.kind) {\n      case \"Number\":\n        return \"NumberValue\";\n      case \"String\":\n        return \"StringValue\";\n      case \"Punctuation\":\n        switch (token.value) {\n          case \"[\":\n            return \"ListValue\";\n          case \"{\":\n            return \"ObjectValue\";\n        }\n        return null;\n      case \"Keyword\":\n        switch (token.value) {\n          case \"true\":\n          case \"false\":\n            return \"BooleanValue\";\n          case \"null\":\n            return \"NullValue\";\n        }\n        return null;\n    }\n  },\n  NumberValue: [t(\"Number\", \"number\")],\n  StringValue: [t(\"String\", \"string\")],\n  BooleanValue: [t(\"Keyword\", \"builtin\")],\n  NullValue: [t(\"Keyword\", \"keyword\")],\n  ListValue: [p(\"[\"), list(\"Value\", p(\",\")), p(\"]\")],\n  ObjectValue: [p(\"{\"), list(\"ObjectField\", p(\",\")), p(\"}\")],\n  ObjectField: [t(\"String\", \"property\"), p(\":\"), \"Value\"]\n};\n"],"names":["indent","state","textAfter","_a","_b","levels","length","this","electricInput","test","indentLevel","config","indentUnit","C","parser","o","eatWhitespace","stream","eatSpace","lexRules","LexRules","parseRules","ParseRules","editorConfig","tabSize","startState","token","fold","closeBrackets","pairs","explode","Punctuation","Number","String","Keyword","Document","p","l","Entry","t","Value","kind","value","NumberValue","StringValue","BooleanValue","NullValue","ListValue","ObjectValue","ObjectField"],"sourceRoot":""}